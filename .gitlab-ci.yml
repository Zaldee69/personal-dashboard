# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
stages:
  - build
  - deploy
  - notify

# Development
build-development:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    IMAGE_TAG: $CI_REGISTRY_IMAGE
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"
    - echo "Registry image:" $IMAGE_TAG
  environment:
    name: development
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - if: $CI_COMMIT_BRANCH == "development"
      exists:
        - Dockerfile

development:
  stage: deploy
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker-compose version
  tags:
    - api-personal-webview-deploy
  script:
    - docker pull "$IMAGE_TAG"
    - docker-compose up -d --force-recreate
    - sleep 5
    - docker ps
    - docker logs api-personal-webview
  needs:
    - ["build-development"]
  environment:
    name: development
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - if: $CI_COMMIT_BRANCH == "development"
      exists:
        - docker-compose.yml

notify_success-development:
  stage: notify
  image: alpine:latest
  before_script:
    - apk update && apk add curl
    - apk add -U tzdata
    - export now=$(TZ=$TZ date +"%A, %d %B %Y | %H:%M")
  needs:
    - ["development"]
  environment:
    name: development
  script:
    - curl -s -X POST $TELEGRAM_BOT_URL -d chat_id=-454120244 -d parse_mode=HTML -d text="<strong>[BUILD SUCCESS]</strong>%0A<strong>DATE :</strong> $now%0A<strong>ENV :</strong> $CI_ENVIRONMENT_NAME%0A<strong>JOB :</strong> $CI_PROJECT_TITLE%0A<strong>BUILD :</strong> $CI_PIPELINE_IID%0A<strong>GIT COMMIT :</strong> $CI_COMMIT_SHA%0A%0ACheck console output using Build URL below to view the results.%0A$CI_PIPELINE_URL"
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - if: $CI_COMMIT_BRANCH == "development"
      exists:
        - docker-compose.yml
      allow_failure: true
      when: on_success

notify_fail-development:
  stage: notify
  image: alpine:latest
  before_script:
    - apk update && apk add curl
    - apk add -U tzdata
    - export now=$(TZ=$TZ date +"%A, %d %B %Y | %H:%M")
  needs:
    - ["development"]
  environment:
    name: development
  script:
    - curl -s -X POST $TELEGRAM_BOT_URL -d chat_id=-454120244 -d parse_mode=HTML -d text="<strong>[BUILD FAILED]</strong>%0A<strong>DATE :</strong> $now%0A<strong>ENV :</strong> $CI_ENVIRONMENT_NAME%0A<strong>JOB :</strong> $CI_PROJECT_TITLE%0A<strong>BUILD :</strong> $CI_PIPELINE_IID%0A<strong>GIT COMMIT :</strong> $CI_COMMIT_SHA%0A%0ACheck console output using Build URL below to view the results.%0A$CI_PIPELINE_URL"
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - if: $CI_COMMIT_BRANCH == "development"
      exists:
        - docker-compose.yml
      allow_failure: true
      when: on_failure

# Staging
build-staging:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"
    - echo "Registry image:" $IMAGE_TAG
  environment:
    name: staging
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)RC\d+$/'
      exists:
        - Dockerfile

staging:
  stage: deploy
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker-compose version
  tags:
    - api-personal-webview-stg-deploy
  script:
    - docker pull "$IMAGE_TAG"
    - sed -i 's/3030:3000/3131:3000/g' docker-compose.yml
    - sed -i 's/api-personal-webview/api-personal-webview-stg/g' docker-compose.yml
    - cat docker-compose.yml
    - docker-compose up -d --force-recreate
    - sleep 5
    - docker ps
    - docker logs api-personal-webview-stg
  environment:
    name: staging
  needs:
    - ["build-staging"]
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)RC\d+$/'
      exists:
        - docker-compose.yml

notify_success-staging:
  stage: notify
  image: alpine:latest
  before_script:
    - apk update && apk add curl
    - apk add -U tzdata
    - export now=$(TZ=$TZ date +"%A, %d %B %Y | %H:%M")
    - echo "TELEGRAM_BOT_URL:" $TELEGRAM_BOT_URL
  needs:
    - ["staging"]
  environment:
    name: staging
  script:
    - curl -s -X POST $TELEGRAM_BOT_URL -d chat_id=-454120244 -d parse_mode=HTML -d text="<strong>[BUILD SUCCESS]</strong>%0A<strong>DATE :</strong> $now%0A<strong>ENV :</strong> $CI_ENVIRONMENT_NAME%0A<strong>JOB :</strong> $CI_PROJECT_TITLE%0A<strong>BUILD :</strong> $CI_PIPELINE_IID%0A<strong>GIT COMMIT :</strong> $CI_COMMIT_SHA%0A%0ACheck console output using Build URL below to view the results.%0A$CI_PIPELINE_URL"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)RC\d+$/'
      exists:
        - docker-compose.yml
      allow_failure: true
      when: on_success

notify_fail-staging:
  stage: notify
  image: alpine:latest
  before_script:
    - apk update && apk add curl
    - apk add -U tzdata
    - export now=$(TZ=$TZ date +"%A, %d %B %Y | %H:%M")
    - echo "TELEGRAM_BOT_URL:" $TELEGRAM_BOT_URL
  needs:
    - ["staging"]
  environment:
    name: staging
  script:
    - curl -s -X POST $TELEGRAM_BOT_URL -d chat_id=-454120244 -d parse_mode=HTML -d text="<strong>[BUILD FAILED]</strong>%0A<strong>DATE :</strong> $now%0A<strong>ENV :</strong> $CI_ENVIRONMENT_NAME%0A<strong>JOB :</strong> $CI_PROJECT_TITLE%0A<strong>BUILD :</strong> $CI_PIPELINE_IID%0A<strong>GIT COMMIT :</strong> $CI_COMMIT_SHA%0A%0ACheck console output using Build URL below to view the results.%0A$CI_PIPELINE_URL"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)RC\d+$/'
      exists:
        - docker-compose.yml
      allow_failure: true
      when: on_failure

# Production
build-production:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"
    - echo "Registry image:" $IMAGE_TAG
  environment:
    name: production
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)[a-z]?$/'
      exists:
        - Dockerfile

production:
  stage: deploy
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker-compose version
  tags:
    - api-personal-webview-prd-deploy
  script:
    - docker pull "$IMAGE_TAG"
    - docker-compose up -d --force-recreate
    - sleep 5
    - docker ps
    - docker logs api-personal-webview
  environment:
    name: production
  needs:
    - ["build-production"]
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)[a-z]?$/'
      exists:
        - docker-compose.yml
      when: manual

notify_success-production:
  stage: notify
  image: alpine:latest
  before_script:
    - apk update && apk add curl
    - apk add -U tzdata
    - export now=$(TZ=$TZ date +"%A, %d %B %Y | %H:%M")
    - echo "TELEGRAM_BOT_URL:" $TELEGRAM_BOT_URL
  needs:
    - ["production"]
  environment:
    name: production
  script:
    - curl -s -X POST $TELEGRAM_BOT_URL -d chat_id=-454120244 -d parse_mode=HTML -d text="<strong>[BUILD SUCCESS]</strong>%0A<strong>DATE :</strong> $now%0A<strong>ENV :</strong> $CI_ENVIRONMENT_NAME%0A<strong>JOB :</strong> $CI_PROJECT_TITLE%0A<strong>BUILD :</strong> $CI_PIPELINE_IID%0A<strong>GIT COMMIT :</strong> $CI_COMMIT_SHA%0A%0ACheck console output using Build URL below to view the results.%0A$CI_PIPELINE_URL"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)[a-z]?$/'
      exists:
        - docker-compose.yml
      allow_failure: true
      when: on_success

notify_fail-production:
  stage: notify
  image: alpine:latest
  before_script:
    - apk update && apk add curl
    - apk add -U tzdata
    - export now=$(TZ=$TZ date +"%A, %d %B %Y | %H:%M")
    - echo "TELEGRAM_BOT_URL:" $TELEGRAM_BOT_URL
  needs:
    - ["production"]
  environment:
    name: production
  script:
    - curl -s -X POST $TELEGRAM_BOT_URL -d chat_id=-454120244 -d parse_mode=HTML -d text="<strong>[BUILD FAILED]</strong>%0A<strong>DATE :</strong> $now%0A<strong>ENV :</strong> $CI_ENVIRONMENT_NAME%0A<strong>JOB :</strong> $CI_PROJECT_TITLE%0A<strong>BUILD :</strong> $CI_PIPELINE_IID%0A<strong>GIT COMMIT :</strong> $CI_COMMIT_SHA%0A%0ACheck console output using Build URL below to view the results.%0A$CI_PIPELINE_URL"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(?:\d+.){2}(?:\d+)[a-z]?$/'
      exists:
        - docker-compose.yml
      allow_failure: true
      when: on_failure

